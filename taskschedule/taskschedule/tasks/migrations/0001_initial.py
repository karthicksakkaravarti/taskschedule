# Generated by Django 5.1.11 on 2025-07-29 09:45

import django.core.validators
import django.db.models.deletion
import taskschedule.tasks.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for the task", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of what this task does",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("background", "Background Job"),
                            ("scheduled", "Scheduled Task"),
                            ("workflow", "Automation Workflow"),
                        ],
                        default="background",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("inactive", "Inactive"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "script_file",
                    models.FileField(
                        blank=True,
                        help_text="Upload a Python script file",
                        null=True,
                        upload_to=taskschedule.tasks.models.upload_script_to,
                        validators=[
                            django.core.validators.FileExtensionValidator(["py"])
                        ],
                    ),
                ),
                (
                    "script_content",
                    models.TextField(
                        blank=True,
                        help_text="Python code to execute (alternative to file upload)",
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("once", "Run Once"),
                            ("interval", "Recurring Interval"),
                            ("cron", "Cron Expression"),
                        ],
                        default="once",
                        max_length=20,
                    ),
                ),
                (
                    "schedule_value",
                    models.CharField(
                        blank=True,
                        help_text="Cron expression, interval in seconds, or datetime for one-time execution",
                        max_length=100,
                    ),
                ),
                (
                    "environment_variables",
                    models.TextField(
                        blank=True,
                        help_text="Environment variables in KEY=value format, one per line",
                    ),
                ),
                (
                    "timeout_seconds",
                    models.PositiveIntegerField(
                        default=3600,
                        help_text="Maximum execution time in seconds (default: 1 hour)",
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum number of retry attempts on failure",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_run_at", models.DateTimeField(blank=True, null=True)),
                ("next_run_at", models.DateTimeField(blank=True, null=True)),
                ("total_runs", models.PositiveIntegerField(default=0)),
                ("successful_runs", models.PositiveIntegerField(default=0)),
                ("failed_runs", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("success", "Success"),
                            ("failure", "Failure"),
                            ("timeout", "Timeout"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Celery task ID for tracking",
                        max_length=200,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "output",
                    models.TextField(
                        blank=True, help_text="Standard output from script execution"
                    ),
                ),
                (
                    "error_output",
                    models.TextField(
                        blank=True, help_text="Error output from script execution"
                    ),
                ),
                ("exit_code", models.IntegerField(blank=True, null=True)),
                (
                    "worker_node",
                    models.CharField(
                        blank=True,
                        help_text="Worker node that executed the task",
                        max_length=100,
                    ),
                ),
                ("execution_time_seconds", models.FloatField(blank=True, null=True)),
                ("memory_usage_mb", models.FloatField(blank=True, null=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="tasks.taskdefinition",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["user", "status"], name="tasks_taskd_user_id_0c958c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["status", "next_run_at"], name="tasks_taskd_status_70914e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["task_type"], name="tasks_taskd_task_ty_3ea05e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecution",
            index=models.Index(
                fields=["task", "status"], name="tasks_taske_task_id_3eb871_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecution",
            index=models.Index(
                fields=["status", "created_at"], name="tasks_taske_status_427f3c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecution",
            index=models.Index(
                fields=["celery_task_id"], name="tasks_taske_celery__37c3dc_idx"
            ),
        ),
    ]
